<?php

namespace app\bo\controller;

use app\bo\libs\BoController;
use think\Request;

class Member extends BoController
{
    function __construct(Request $request)
    {
        $this->model = new \app\bo\model\Member();
        parent::__construct($request);
    }

    public function all()
    {
        $this->assign("stype", "member");
        return parent::all(); // TODO: Change the autogenerated stub
    }

    public function searchMember()
    {
        $memberModel = new \app\bo\model\Member();
        $this->assign("type", "member");
        return $this->search($memberModel);
    }

    public function searchMemberNoList()
    {
        $memberModel = new \app\bo\model\Member();
        $this->assign("type", "member");
        $this->other = "main-pannel";
        return $this->search($memberModel);
    }

    protected function doAdd()
    {
        $post = $this->request->post();

        $arr = ['code', 'name', 'email', 'phone', 'department', 'did', 'office', 'password', 'isAdmin'];

        foreach ($arr as $item) {
            $data['m_' . $item] = trim($post[$item]);
        }

        //$arr['m_email'] = strtoupper($arr['m_email']);

        $validate = new \app\bo\validate\Member();

        if ($validate->check($data)) {

            if(empty($data['m_password'])){
                $data['m_password'] = encryptPassword('123123');
            }else{
                $data['m_password'] = encryptPassword($data['m_password']);
            }

            if ($this->model->insert($data)) {
                $ret = ['flag' => 1, 'msg' => '添加成功'];
            } else {
                $ret = ['flag' => 0, 'msg' => '添加失败'];
            }
        } else {
            $ret = ['flag' => 0, 'msg' => $validate->getError()];
        }

        return $ret;

    }

    public function detail($id)
    {
        $pop = Request::instance()->get("pop");
        $data = $this->model->getDataById($id);

        $readonly = $isSelf = $isAdmin = false;
        if( $this->current->m_id == $id ){
            $isSelf = true;
        }
        if( $this->current->m_isAdmin == 1){
            $isAdmin = true;
        }
        if( !$isAdmin && !$isSelf ){
            $readonly = true;
        }

        $this->assign('isSelf',$isSelf);
        $this->assign('isAdmin',$isAdmin);
        $this->assign('readonly',$readonly);
        $this->assign('data', $data);
        $files = "";
        if(!empty($pop)){
            $files = "member/pop";
        }
        return $this->fetch($files);
    }

    public function update()
    {
        $post = $this->request->post();

        $arr = ['email', 'code', 'isAdmin', 'name', 'phone', 'department', 'did', 'office', 'password'];

        foreach ($arr as $k) {
            $member['m_' . $k] = trim($post[$k]);
        }

        //$member['m_email'] = strtoupper($member['m_email']);

        $member['m_id'] = $post['id'];

        $validate = validate('Member');

        if($validate->check($member)) {
            if (!$member['m_password']) {
                unset($member['m_password']);
            } else {
                $member['m_password'] = encryptPassword($member['m_password']);
            }
            $this->model->save($member, ['m_id' => $post['id']]);
            $error = $this->model->getError();
            if (empty($error)) {
                $ret = ['flag' => 1, 'msg' => '更新成功'];
            } else {
                $ret = ['flag' => 0, 'msg' => '更新失败'];
            }
        }else{
            $ret = ['flag'=>0,'msg'=>$validate->getError()];
        }


        return $ret;

    }

    public function export()
    {
        return $this->doExport();
    }

    public function selectMember()
    {
        return $this->filter('select',1);
    }

}