<?php

namespace app\bo\controller;

use app\bo\libs\BoController;
use app\bo\model\Menu;
use think\Request;

class Member extends BoController
{
    function __construct(Request $request)
    {
        $this->model = new \app\bo\model\Member();
        parent::__construct($request);
    }

    public function all()
    {
        $this->assign("stype", "member");
        return parent::all(); // TODO: Change the autogenerated stub
    }

    public function searchMember()
    {
        $memberModel = new \app\bo\model\Member();
        $this->assign("type", "member");
        return $this->search($memberModel);
    }

    public function searchMemberNoList()
    {
        $memberModel = new \app\bo\model\Member();
        $this->assign("type", "member");
        $this->other = "main-pannel";
        return $this->search($memberModel);
    }

    public function add()
    {
        $menuModel = new Menu();
        $menuList = $menuModel->getList();
        $this->assign("menuList", json_encode(array_values($menuList)));
        return parent::add(); // TODO: Change the autogenerated stub
    }

    protected function doAdd()
    {
        $post = $this->request->post();

        $permissions = $post['permissions'];

        $arr = ['code', 'name', 'email', 'phone', 'department', 'did', 'office', 'password', 'isAdmin','cname'];

        foreach ($arr as $item) {
            $data['m_' . $item] = trim($post[$item]);
        }

        $data['m_email'] = strtoupper($data['m_email']);

        $validate = new \app\bo\validate\Member();

        if ($validate->check($data)) {

            if(empty($data['m_password'])){
                $data['m_password'] = encryptPassword('123123');
            }else{
                $data['m_password'] = encryptPassword($data['m_password']);
            }
            $id = $this->model->insert($data);
            if ($id) {
                $ret = ['flag' => 1, 'msg' => '添加成功'];
                $permissionsModel = new \app\bo\model\Permissions();
                if($post['m_isAdmin'] == "2" AND !empty($permissions)){
                    $all = [];
                    $permissions = explode(",", $permissions);
                    foreach($permissions as $val){
                        $tmp = ["menu_id"=>$val,"member_id"=>$id,"opt"=>"2"];
                        $all[] = $tmp;
                    }
                    $permissionsModel->saveAll($all);
                }
            } else {
                $ret = ['flag' => 0, 'msg' => '添加失败'];
            }
        } else {
            $ret = ['flag' => 0, 'msg' => $validate->getError()];
        }

        return $ret;

    }

    /**
     * @param $id
     * @return mixed
     */
    public function detail($id)
    {
        $pop = Request::instance()->get("pop");
        $data = $this->model->getDataById($id);

        $readonly = $isSelf = $isAdmin = false;
        if( $this->current->m_id == $id ){
            $isSelf = true;
        }
        if( $this->current->m_isAdmin == 1){
            $isAdmin = true;
        }
        if( !$isAdmin && !$isSelf ){
            $readonly = true;
        }
        $menuModel = new Menu();
        $menuList = $menuModel->getList();
        $memberList = \app\bo\model\Permissions::all(["member_id" => $id]);
        $tmp = [];
        foreach ($memberList as $val) {
            $tmp[] = $val['menu_id'];
        }
        $this->assign("memberList", "," . implode(",", $tmp) . ",");
        $this->assign("menuList", json_encode(array_values($menuList)));
        $this->assign('isSelf',$isSelf);
        $this->assign('isAdmin',$isAdmin);
        $this->assign('readonly',$readonly);
        $this->assign('data', $data);
        $files = "";
        if(!empty($pop)){
            $files = "member/pop";
        }
        return $this->fetch($files);
    }

    public function update()
    {
        $post = $this->request->post();

        $permissions = $post['permissions'];

        $arr = ['email', 'code', 'isAdmin', 'name', 'phone', 'department', 'did', 'office', 'password','cname'];

        foreach ($arr as $k) {
            $member['m_' . $k] = trim($post[$k]);
        }

        $member['m_email'] = strtoupper($member['m_email']);

        $member['m_id'] = $post['id'];

        $validate = validate('Member');

        if($validate->check($member)) {
            if (!$member['m_password']) {
                unset($member['m_password']);
            } else {
                $member['m_password'] = encryptPassword($member['m_password']);
            }
            $this->model->save($member, ['m_id' => $post['id']]);
            $error = $this->model->getError();
            if (empty($error)) {
                $ret = ['flag' => 1, 'msg' => '更新成功'];
                $permissionsModel = new \app\bo\model\Permissions();
                $permissionsModel->where("member_id", "=", $post['id'])->delete();
                if($member['m_isAdmin'] == "2" AND !empty($permissions)){
                    $all = [];
                    $permissions = explode(",", $permissions);
                    foreach($permissions as $val){
                        $tmp = ["menu_id"=>$val,"member_id"=>$post['id'],"opt"=>"2"];
                        $all[] = $tmp;
                    }
                    $permissionsModel->saveAll($all);
                }
            } else {
                $ret = ['flag' => 0, 'msg' => '更新失败'];
            }
        }else{
            $ret = ['flag'=>0,'msg'=>$validate->getError()];
        }


        return $ret;

    }

    public function export()
    {
        return $this->doExport();
    }

    public function selectMember()
    {
        return $this->filter('select',1);
    }

}