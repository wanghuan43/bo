<?php

namespace app\bo\controller;

use app\bo\libs\BoController;
use app\bo\model\Taglink;
use think\Request;

class Taglib extends BoController
{
    protected $model;

    public function __construct(Request $request)
    {
        parent::__construct($request);
        $this->model = new \app\bo\model\Taglib();
    }

    public function all()
    {
        $list = $this->model->getList();
        $this->assign('lists', $list);
        $this->assign("stype", "taglib");
        $this->assign('formUrl', '/taglib/all');
        return parent::all();
    }

    public function searchTaglib()
    {
        $this->assign("type", "taglib");
        $this->assign("mul", Request::instance()->get("mul"));
        return $this->search($this->model); // TODO: Change the autogenerated stub
    }

    public function opt()
    {
        $id = Request::instance()->get("id", 0);
        $tl = $this->model->find($id);
        $this->assign("tl", $tl);
        return $this->fetch();
    }

    public function doOpt()
    {
        $id = Request::instance()->post("tl_id");
        $name = Request::instance()->post("tl_name");
        $data = ["tl_name" => $name];
        $tm = new \app\bo\model\Taglib();
        $where = [];
        if (!empty($id)) {
            $where = ["tl_id" => $id];
            $tm->where("tl_id", "<>", $id)->where("tl_name", $name);
        } else {
            $tm->where("tl_name", $name);
        }
        if ($tm->find()) {
            return ["status" => 0, "msg" => "标签名称重复"];
        }
        $this->model->save($data, $where);
        return ["status" => 1, "msg" => "标签保存成功"];
    }

    public function add($type = false)
    {
        $ids = $this->request->post('ids/a');
        $mids = $this->request->post('mids/a');
        if (!$type || !$ids || !$mids) {
            $ret = ['flag' => 0, 'msg' => '参数错误'];
        } else {
            $type = strtolower($type);
            foreach ($ids as $ot_id) {
                foreach ($mids as $val) {
                    Taglink::create(["ot_id" => $ot_id, "tl_id" => $val, "model" => $type]);
                }
            }
            $ret = ['flag' => 1, 'msg' => '操作成功'];
        }
        return $ret;
    }

    public function del($type = false)
    {
        $ids = $this->request->post('ids/a');
        $mids = $this->request->post('mids/a');
        if (!$type || !$ids || !$mids) {
            $ret = ['flag' => 0, 'msg' => '参数错误'];
        } else {
            $type = strtolower($type);
            $tl = new Taglink();
            $tl->where("model", "=", $type)->whereIn("ot_id", $ids)->whereIn("tl_id", $mids)->delete();
            $ret = ['flag' => 1, 'msg' => '操作成功'];
        }
        return $ret;
    }
}